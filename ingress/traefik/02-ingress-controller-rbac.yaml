---
apiVersion: v1
kind: Namespace
metadata:
  name: traefik
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-sa
  namespace: traefik
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: traefik-int
  namespace: traefik
  labels:
    k8s-app: traefik-int
spec:
  selector:
    matchLabels:
      k8s-app: traefik-int
      name: traefik-int
  template:
    metadata:
      labels:
        k8s-app: traefik-int
        name: traefik-int
    spec:
      tolerations:
      - effect: NoSchedule
        operator: Exists
      serviceAccountName: traefik-ingress-sa
      terminationGracePeriodSeconds: 60
      hostNetwork: true
      containers:
      - image: traefik:2.2
        name: traefik
        ports:
        - name: web
          containerPort: 80
          #hostPort: 80 
        - name: websecure
          containerPort: 443
          #hostPort: 443
        - name: traefik
          containerPort: 8080
        securityContext:
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        args:
        - --log=true
        - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
        - --accesslog=true
        - --ping=true
        #- --providers.kubernetesCRD.ingressclass=traefik-internal
        - --providers.kubernetescrd
        - --api.dashboard=true
        - --api.insecure=true
        - --entrypoints.web.address=:80
        - --entrypoints.websecure.address=:443
        - --api=true
---
kind: Service
apiVersion: v1
metadata:
  name: traefik-int
  namespace: traefik
spec:
  selector:
    k8s-app: traefik-int
  type: NodePort  
  ports:
    - name: web
      protocol: TCP
      # Nodeport = Which port on the node is the service available through?
      # This setting makes the service visible outside the Kubernetes cluster by the node’s IP address and the port number declared in this property. 
      # The service also has to be of type NodePort (if this field isn’t specified, Kubernetes will allocate a node port automatically).
      nodePort: 31742
      # Port = Inside the cluster, what port does the service expose?
      # Expose the service on the specified port internally within the cluster. 
      # That is, the service becomes visible on this port, and will send requests made to this port to the pods selected by the service.
      port: 80
      # TargetPort = Which port do pods selected by this service expose?
      # This is the port on the pod that the request gets sent to. 
      # Your application needs to be listening for network requests on this port for the service to work.
      #targetPort: 80
    - name: websecure
      protocol: TCP
      nodePort: 31743
      port: 443
      #targetPort: 443
---
kind: Service
apiVersion: v1
metadata:
  name: traefik-dashboard
  namespace: traefik
spec:
  selector:
    k8s-app: traefik-int
  type: ClusterIP
  ports:
    - name: traefik
      protocol: TCP
      port: 8080
      targetPort: 8080
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-cr

rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - middlewares
      - ingressroutes
      - traefikservices
      - ingressroutetcps
      - ingressrouteudps
      - tlsoptions
      - tlsstores
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-cr
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-cr
subjects:
  - kind: ServiceAccount
    name: traefik-ingress-sa
    namespace: traefik
